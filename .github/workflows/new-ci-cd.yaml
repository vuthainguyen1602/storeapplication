name: CI workflows

on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_PASS:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_PROJECT_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USER:
        required: true
      EC2_KEY:
        required: true
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  RunUnitTest:
    runs-on: ubuntu-latest
    steps:
      - name: Check out sources code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run UT
        run: |
          echo running on branch ${GITHUB_REF##*/}
          mvn clean test

      - name: Run Checkstyle
        run: mvn checkstyle:checkstyle

  RunIntegrationTest:
    needs: RunUnitTest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run IT
        run: |
          mvn clean verify -Pintegration-test

  RunSonarScan:
    needs: RunIntegrationTest
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN || secrets.SONARCLOUD_TOKEN}}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          mvn -B verify sonar:sonar -Psonarcloud,ci \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        continue-on-error: true # should be removed after sonar project created

  BuildAndPushDocker:
    needs: RunSonarScan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out sources code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USER }}/storeapplication
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  DeployToEC2:
    needs: BuildAndPushDocker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Starting deployment..."
            
            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USER }}/storeapplication:latest
            
            # Stop and remove existing container gracefully
            if docker ps -q -f name=storeapp; then
              echo "Stopping existing container..."
              docker stop storeapp || true
              docker rm storeapp || true
            fi
            
            # Clean up old images to save space
            docker image prune -f
            
            # Run new container with health check and proper logging
            echo "Starting new container..."
            docker run -d --name storeapp \
              -p 8080:8080 \
              --restart=unless-stopped \
              --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --log-driver=json-file \
              --log-opt=max-size=10m \
              --log-opt=max-file=3 \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKERHUB_USER }}/storeapplication:latest
            
            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" storeapp | grep -q "healthy"; do echo "Waiting..."; sleep 5; done' || echo "Warning: Container health check timeout"
            
            # Show container status
            docker ps -f name=storeapp
            echo "Deployment completed!"

  NotifyDeploymentStatus:
    needs: DeployToEC2
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Success
        if: needs.DeployToEC2.result == 'success'
        run: |
          echo "Deployment to EC2 successful!"
          echo "Application should be available at: http://${{ secrets.EC2_HOST }}:8080"

      - name: Deployment Failed
        if: needs.DeployToEC2.result == 'failure'
        run: |
          echo "Deployment to EC2 failed!"
          echo "Please check the logs and retry deployment."
          exit 1